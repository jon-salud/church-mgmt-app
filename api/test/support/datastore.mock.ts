import { DataStore } from '../../src/datastore';

const resolvedFn = <T>(value?: T) => jest.fn().mockResolvedValue(value);

const mockSession = {
  session: {
    token: 'test-token',
    userId: 'user-admin',
    createdAt: new Date().toISOString(),
    provider: 'demo' as const,
  },
  user: {
    id: 'user-admin',
    primaryEmail: 'admin@example.com',
    roles: [{ churchId: 'church-acc', roleId: 'role-admin', role: 'Admin' }],
    profile: {},
  } as any,
};

export const createDataStoreMock = (): jest.Mocked<DataStore> => ({
  getChurch: resolvedFn(),
  getDashboardSnapshot: resolvedFn(),
  listUsers: resolvedFn(),
  getUserById: resolvedFn(),
  getUserByEmail: resolvedFn(),
  getUserProfile: resolvedFn(),
  createUser: resolvedFn(),
  updateUser: resolvedFn(),
  deleteUser: resolvedFn(),
  listHouseholds: resolvedFn([{ id: 'hh-matau', name: 'Matau Family' }]),
  getHouseholdById: resolvedFn(),
  getHouseholdMembers: resolvedFn([]),
  listGroups: resolvedFn(),
  getGroupById: resolvedFn(),
  getGroupMembers: resolvedFn(),
  addGroupMember: resolvedFn(),
  updateGroupMember: resolvedFn(),
  removeGroupMember: resolvedFn(),
  listEvents: resolvedFn([{ id: 'event-sunday-service', title: 'Sunday Service' }]),
  getEventById: resolvedFn(),
  createEvent: resolvedFn(),
  updateEvent: resolvedFn(),
  deleteEvent: resolvedFn(),
  createEventVolunteerRole: resolvedFn(),
  updateEventVolunteerRole: resolvedFn(),
  deleteEventVolunteerRole: resolvedFn(),
  createEventVolunteerSignup: resolvedFn(),
  deleteEventVolunteerSignup: resolvedFn(),
  recordAttendance: resolvedFn(),
  listAnnouncements: resolvedFn(),
  markAnnouncementRead: resolvedFn(),
  createAnnouncement: resolvedFn(),
  updateAnnouncement: resolvedFn(),
  listFunds: resolvedFn(),
  listContributions: resolvedFn(),
  recordContribution: resolvedFn(),
  updateContribution: resolvedFn(),
  getGivingSummary: resolvedFn(),
  exportContributionsCsv: resolvedFn(),
  listRoles: resolvedFn([]),
  createRole: resolvedFn(),
  updateRole: resolvedFn(),
  deleteRole: resolvedFn(),
  createSession: resolvedFn(mockSession),
  getSessionByToken: resolvedFn(),
  upsertUserFromOAuth: resolvedFn(),
  listAuditLogs: resolvedFn(),
  createAuditLog: resolvedFn(),
  getSettings: resolvedFn({}),
  initializeSettings: resolvedFn({}),
  updateSettings: resolvedFn(),
  createChild: resolvedFn(),
  updateChild: resolvedFn(),
  deleteChild: resolvedFn(),
  getChildren: resolvedFn([]),
  getCheckinsByEventId: resolvedFn([]),
  getCheckinById: resolvedFn(),
  createCheckin: resolvedFn(),
  updateCheckin: resolvedFn(),
  createPushSubscription: resolvedFn(),
  getPushSubscriptionsByUserId: resolvedFn([]),
  createPastoralCareTicket: resolvedFn(),
  updatePastoralCareTicket: resolvedFn(),
  createPastoralCareComment: resolvedFn(),
  getPastoralCareTicket: resolvedFn(),
  listPastoralCareTickets: resolvedFn([]),
  getPrayerRequests: resolvedFn([]),
  getRequests: resolvedFn([]),
  createRequest: resolvedFn(),
  listRequestTypes: resolvedFn([]),
  createRequestType: resolvedFn(),
  updateRequestType: resolvedFn(),
  archiveRequestType: resolvedFn(),
  updateRequestTypeStatus: resolvedFn(),
  reorderRequestTypes: resolvedFn(),
  createInvitation: resolvedFn(),
  getInvitationByToken: resolvedFn(),
  acceptInvitation: resolvedFn(),
  listInvitations: resolvedFn([]),
  bulkCreateInvitations: resolvedFn([]),
  getEventVolunteerSignupById: resolvedFn(),
});
